@model nclprospekt.Models.ZamowienieWczytaneWO

@{
    ViewBag.Title = "Detale zamówienia";
}

<script type="text/javascript">
    var settingsModal = {
        "dom": '<"top">t<"row-fluid"<"span2 offset1"><"span6 offset1"p>>', //Tu są wyłączone paginacje i filtry
        "language": {
            "sProcessing": "   ",
            "sLengthMenu": "Pozycji na stronę _MENU_ ",
            "sZeroRecords": "Nie znaleziono pasujących pozycji",
            "sInfoThousands": " ",
            "sInfo": "Pozycje od _START_ do _END_ z _TOTAL_ łącznie",
            "sInfoEmpty": "Pozycji 0 z 0 dostępnych",
            "sInfoFiltered": "(filtrowanie spośród _MAX_ dostępnych pozycji)",
            "sInfoPostFix": "",
            "sSearch": "Filtruj wynik:",
            "sUrl": "",
            "oPaginate": {
                "sFirst": '<i class="fa fa-angle-double-left fa-2x"></i>',
                "sPrevious": '<i class="fa fa-angle-left fa-2x"></i>',
                "sNext": '<i class="fa fa-angle-right fa-2x"></i>',
                "sLast": '<i class="fa fa-angle-double-right fa-2x"></i>'
            },
            "sEmptyTable": "Brak danych",
            "sLoadingRecords": "   ",
            "oAria": {
                "sSortAscending": ": aktywuj, by posortować kolumnę rosnąco",
                "sSortDescending": ": aktywuj, by posortować kolumnę malejąco"
            }
        },

        "sPaginationType": "input",
       // pagerSettings: { firstIcon: "fa fa-angle-double-left fa-2x", previousIcon: "fa fa-angle-left fa-2x", nextIcon: "fa fa-angle-right fa-2x", lastIcon: "fa fa-angle-double-right fa-2x" },
        bAutoWidth: true,

        "aoColumns": [
        { sWidth: '2%' }, //<th>Lp.</th>
        { sWidth: '7%' }, //<th>SKU</th>
        {
            sWidth: '25%', "render": function (data) {
                return '<span style="white-space:normal;overflow:hidden;text-overflow:ellipsis;">' + data + '</span>';
            }
        }, //<th>Nazwa</th>
        { sWidth: '10%' }, //<th>Ilość</th>
        { sWidth: '10%' }, //<th>Dostępna ilość</th>
        { sWidth: '5%' }, //<th>JM</th>
        { sWidth: '10%' }, //<th>Koszt punktowy</th>
        { sWidth: '10%' }], //<th>Grupa</th>

        "fnInitComplete": function () {
            
            $('#zamowieniePozycje').show();
        }

    };

    $(document).ready(
         function () {
             var t = $('#zamowieniePozycje')
             .DataTable(settingsModal);
            
             t.on('order.dt search.dt', function () {
                 t.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
                     cell.innerHTML = i + 1;
                 });
             }).draw();
             t.responsive.recalc();
         });

</script>


<div class="panel panel-default">
    <div class="panel-heading">
        @Html.DisplayNameFor(model => model.zamowienie.wlasciciel_nazwa)&nbsp;:&nbsp;@Html.DisplayFor(model => model.zamowienie.wlasciciel_nazwa)
    </div>
</div>
@Html.AntiForgeryToken()
@*Pozycje zamówienia*@
<div class="row">
    <div class="col-md-12">
        <div class="panel panel-primary panel-block">
            <div class="panel-heading">
                Pozycje zamówienia
            </div>
            <div class="panel-body">

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-12 col-lg-12">
                            @Html.DisplayNameFor(model => model.zamowienie.limit)&nbsp;:&nbsp;<b>@Html.DisplayFor(model => model.zamowienie.limit)&nbsp;</b>
                            @Html.DisplayNameFor(model => model.zamowienie.wartosc)&nbsp;:&nbsp;<b><span id="wartoscLbl">@Html.DisplayFor(model => model.zamowienie.wartosc)</span>&nbsp;</b>
                            @Html.DisplayNameFor(model => model.zamowienie.zamowienie_status)&nbsp;:&nbsp;<b>@Html.DisplayFor(model => model.zamowienie.zamowienie_status)</b>
                        </div>
                    </div>
    <div class="table-responsive">
        <table id="zamowieniePozycje" class="table table-striped table-hover dt-responsive display nowrap tableTextCenter" cellspacing="0" style="display: none" width="100%">

                                <thead>
                                    <tr>
                                        <th>Lp.</th>
                                    <th>@Html.DisplayNameFor(model => Model.zamowieniePozycje.FirstOrDefault().sku)</th>
                                    <th>@Html.DisplayNameFor(model => Model.zamowieniePozycje.FirstOrDefault().sku_nazwa)</th>
                                    <th>@Html.DisplayNameFor(model => Model.zamowieniePozycje.FirstOrDefault().ilosc)</th>
                                    <th><span style="white-space: normal; overflow: hidden; text-overflow: ellipsis;">@Html.DisplayNameFor(model => Model.zamowieniePozycje.FirstOrDefault().ilosc_dostepna)</span></th>
                                    <th>@Html.DisplayNameFor(model => Model.zamowieniePozycje.FirstOrDefault().JM)</th>
                                    <th>@Html.DisplayNameFor(model => Model.zamowieniePozycje.FirstOrDefault().koszt_punktowy)</th>
                                    <th>@Html.DisplayNameFor(model => Model.zamowieniePozycje.FirstOrDefault().grupa)</th>
                                    </tr>
                                </thead>
                                <tbody>
                                

                                        @for (int i = 0; i < Model.zamowieniePozycje.Count(); i++)
                                        {
                                            int j = i + 1;
                                            <tr id="item_@i">
                                                <td>@j</td>
                                                <td>@Html.DisplayFor(model => Model.zamowieniePozycje[i].sku)</td>
                                                <td>@Html.DisplayFor(model => Model.zamowieniePozycje[i].sku_nazwa)</td>
                                                <td>@Html.DisplayFor(model => Model.zamowieniePozycje[i].ilosc)</td>
                                                <td>@Html.DisplayFor(model => Model.zamowieniePozycje[i].ilosc_dostepna)</td>
                                                <td>@Html.DisplayFor(model => Model.zamowieniePozycje[i].JM)</td>
                                                <td>@Html.DisplayFor(model => Model.zamowieniePozycje[i].koszt_punktowy)</td>
                                                <td>@Html.DisplayFor(model => Model.zamowieniePozycje[i].grupa)</td>
                                            </tr>
                                        }
                                    
                                </tbody>

                            </table>
                  
    </div>


                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@*Stopka z adresami*@
<div class="row">

    @*Dane zamowienia (adresy)*@
    <div class="col-xs-12 col-sm-7 col-md-7 col-lg-7">

        <div class="panel panel-primary">
            <div class="panel-heading">
                Dostawa
            </div>
            <!-- end panel-heading -->
            <div class="panel-body">
                <label for="contact_name">
                    Sposób dostawy
                </label><br />
                <div class="col-xs-12">
                @if (@Model.zamowienie.typ_zamowienia == 3)
                {
                    <div class="radio-inline">
                        @Html.RadioButtonFor(model => model.zamowienie.typ_zamowienia, 3, new { id = "3adresZdefiniowany", Checked = "check", type = "radio", @class = "radio sprawdzane" })
                        @Html.Label("Lbl3adresZdefiniowany", "Dostawa na adres zdefiniowany", new { @for = "3adresZdefiniowany" })
                    </div>
                    <div id="sel3adresZdefiniowany" class="divSelect" style="@(Model.zamowienie.typ_zamowienia == 3 ? "" : "display:none")">
                        @Html.DropDownListFor(model => model.zamowienie.adres_id, new SelectList(Model.zamowienieZdefiniowaneAdresy, "adres_id", "nazwa"), new { @class = "form-control", disabled = "disabled" })
                    </div>
                }
                @if (@Model.zamowienie.typ_zamowienia == 6)
                {
                    <div class="radio-inline">
                        @Html.RadioButtonFor(model => model.zamowienie.typ_zamowienia, 6, new { id = "6oddzialKuriera", Checked = "check", type = "radio", @class = "radio sprawdzane", disabled = "disabled" })
                        @Html.Label("Lbl6oddzialKuriera", "Odbiór własny w oddziale kuriera", new { @for = "6oddzialKuriera" })
                    </div>

                    <div id="sel6oddzialKuriera" class="divSelect" style="@(Model.zamowienie.typ_zamowienia == 6 ? "" : "display:none")">
                        @Html.DropDownListFor(model => model.zamowienie.oddzial_docelowy_id, new SelectList(Model.zamowienieKurierAdresy, "oddzial_id", "nazwa"), new { @class = "form-control", disabled = "disabled" })
                    </div>
                }
                @if (@Model.zamowienie.typ_zamowienia == 2)
                {
                    <div class="radio-inline">
                        @Html.RadioButtonFor(model => model.zamowienie.typ_zamowienia, 2, new { id = "2magazyn", Checked = "check", type = "radio", @class = "radio" })
                        @Html.Label("Lbl2magazyn", "Odbiór własny w magazynie", new { @for = "2magazyn" })
                    </div>

                    <div id="sel2magazyn" class="divSelect">
                        @Html.DropDownListFor(model => model.zamowienie.magazyn_docelowy_id, new SelectList(Model.zamowienieMagazyny, "magazyn_id", "nazwa"), new { @class = "form-control", disabled = "disabled" })
                    </div>
                }
                @if (@Model.zamowienie.typ_zamowienia == 4)
                {

                    <div class="radio-inline">
                        @Html.RadioButtonFor(model => model.zamowienie.typ_zamowienia, 4, new { id = "4inny", Checked = "check", type = "radio", @class = "radio" })
                        @Html.Label("Lbl4inny", "Odbiór inny adres", new { @for = "4inny" })
                    </div>

                    <div class="form-group">
                        @Html.HiddenFor(model => model.zamowienie.typ_zamowienia)
                        @Html.HiddenFor(model => model.zamowienie.zamowienie_id)
                        <input id="daneZmienione" value="0" style="display:none" />

                        <div class="form-group divSelect" id="sel4inny" style="@(Model.zamowienie.typ_zamowienia == 4 ? "" : "display:none")">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.zamowienie.nazwa)
                                    @Html.TextBoxFor(model => model.zamowienie.nazwa, new { @class = "form-control af4inny", @readonly = "readonly", disabled="true" })
                                @Html.ValidationMessageFor(model => model.zamowienie.nazwa)
                            </div>
                            @*<div class="col-md-7">
                                    @Html.LabelFor(model => model.zamowienie.email_odbiorcy)
                                        @Html.TextBoxFor(model => model.zamowienie.email_odbiorcy, new { @class = "form-control", @readonly = "readonly", disabled="true" })
                                </div>*@

                            <div class="col-md-5">
                                @Html.LabelFor(model => model.zamowienie.kod)
                                    @Html.TextBoxFor(model => model.zamowienie.kod, new { @class = "form-control", @readonly = "readonly", disabled="true" })
                            </div>
                            <div class="col-md-7">
                                @Html.LabelFor(model => model.zamowienie.miasto)
                                    @Html.TextBoxFor(model => model.zamowienie.miasto, new { @class = "form-control", @readonly = "readonly", disabled="true" })
                            </div>

                            <div class="col-md-12">
                                @Html.LabelFor(model => model.zamowienie.adres)
                                    @Html.TextBoxFor(model => model.zamowienie.adres, new { @class = "form-control", @readonly = "readonly", disabled="true" })
                            </div>
                        </div>
                    </div>
                }
                    
                </div>
                <div class="col-xs-12 col-sm-6 col-md-6">
                    <label for="zamowienie_data_realizacji"> Data realizacji </label>
                    @{DateTime dateData = (Model.zamowienie.data_realizacji == null) ? DateTime.Today : (DateTime)Model.zamowienie.data_realizacji;
                    string strData = dateData.ToString("yyyy-MM-dd").Substring(0, 10);}
                    @Html.TextBox("realizacja", String.Format("{0:d}", strData), new { @class = "form-control", type = "date", data_date_format = "yyyy-MM-dd", @readonly = "readonly", disabled = "true" })
                </div>
            </div>

        </div>

    </div>


    @*Dane zamowienia (kontakt)*@
    <div class="col-xs-12 col-sm-5 col-md-5 col-lg-5">

        <div class="panel panel-primary ">
            <div class="panel-heading">
                Kontakt
            </div>
            <div class="panel-body">

                @Html.LabelFor(model => model.zamowienie.osoba_kontaktowa)
                @Html.TextBoxFor(model => model.zamowienie.osoba_kontaktowa, new { @class = "form-control", @readonly = "readonly", disabled = "true" })

                @Html.LabelFor(model => model.zamowienie.telefon_kontaktowy)
                @Html.TextBoxFor(model => model.zamowienie.telefon_kontaktowy, new { @class = "form-control", @readonly = "readonly", disabled = "true" })


                @Html.LabelFor(model => model.zamowienie.uwagi)<br />
                @Html.TextAreaFor(model => model.zamowienie.uwagi, new { @class = "form-control", @style = "margin-top: 0px; margin-bottom: 0px; height: 90px; resize: none;", @disabled = "disabled" })

            </div>
        </div>


    </div>
</div>

<div class="row">


    <div class="col-xs-12 col-sm-6">
    <div class="form-group">
            @if (@Model.zamowienie.tryb_pracy == 1) //Czyli podglad wlasnego zamowienia
            {
                <a href="@Url.Action("Edit", "Koszyk", new {id=Model.zamowienie.zamowienie_id})" class="btn btn-lg btn-info btn-mobile">
                    <i class="fa fa-edit">&nbsp;&nbsp;</i> 
                    Edytuj to zamówienie
                </a>

            }
        </div>
    </div>

    <div class="col-xs-12 col-sm-6">
        <div class="form-group">
    <button type="button" class="btn btn-lg btn-danger btn-mobile detail-link-return" data-dismiss="modal">
            <i class="fa fa-times">&nbsp;&nbsp;</i> 
        <span aria-hidden="true"></span>
        Wróć
    </button>
        </div>
    </div>
</div>