@model nclprospekt.Models.ZamowienieWczytaneWO
@{
    ViewBag.Title = "Koszyk";
}
@section scripts {
    <script src="@Url.Content("~/Scripts/bootstrap-datepicker-pl.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/custom-koszyk.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/plugins/DataTables/dataTables.fnGetHiddenNodes.custom.js")" type="text/javascript"></script>

    <script type="text/javascript">
        var settings = {
            "dom": '<"top"lf>rt<"row-fluid"<"span2 offset1"i><"span6 offset1"p>>',
            "language": {
                "sProcessing": "   ",
                "sLengthMenu": "_MENU_ pozycji na stronę",
                "sZeroRecords": "Nie znaleziono pasujących pozycji",
                "sInfoThousands": " ",
                "sInfo": "Pozycje od _START_ do _END_ z _TOTAL_ łącznie",
                "sInfoEmpty": "Pozycji 0 z 0 dostępnych",
                "sInfoFiltered": "(filtrowanie spośród _MAX_ dostępnych pozycji)",
                "sInfoPostFix": "",
                "sSearch": "Filtruj wynik:",
                "sUrl": "",
                "oPaginate": {
                    "sFirst": '<i class="fa fa-angle-double-left fa-2x"></i>',
                    "sPrevious": '<i class="fa fa-angle-left fa-2x"></i>',
                    "sNext": '<i class="fa fa-angle-right fa-2x"></i>',
                    "sLast": '<i class="fa fa-angle-double-right fa-2x"></i>'
                },
                "sEmptyTable": "Brak danych",
                "sLoadingRecords": " ",
                "oAria": {
                    "sSortAscending": ": aktywuj, by posortować kolumnę rosnąco",
                    "sSortDescending": ": aktywuj, by posortować kolumnę malejąco"
                }
            },
            "aLengthMenu": [[10, 25, 50, 75], [10, 25, 50, 75]],
            "sPaginationType": "input",
            "stateSave": true,
            "scrollCollapse": true,
            bPaginate: false,
        bAutoWidth: false,

        "columns": [
                        {
                            "class": "details-control all",
                        "orderable": false,
                        "data": null,
                            "defaultContent": ""
                        },//<th>#</th>
                {"class":"all", "title": "Ilość"}, //<th>Ilość</th>
               { "class": "all", "title": "Nazwa" }, //<th>Nazwa</th>
                { "title": "SKU" }, //<th>SKU</th>
                { "title": "Ilość dostępna" }, //<th>Ilość dostępna</th>
                 { "title": "J.M." }, //<th>J.M.</th>
                 { "title": "Koszt punktowy" }, //<th>koszt_punktowy</th>
                     { "title": "Grupa" },//, //<th>JM</th>
                     { "title": "Usuń" } //<th>Usuń</th>



            @*
            <th>@Html.DisplayNameFor(model => Model.zamowieniePozycje.First().JM)</th>
            <th class="sum">@Html.DisplayNameFor(model => Model.zamowieniePozycje.First().koszt_punktowy)</th>
            <th>@Html.DisplayNameFor(model => Model.zamowieniePozycje.First().grupa)</th>
            <th class="all">Usuń</th>*@



            ],
            "order": [[1, 'asc']],
            "fnInitComplete": function () {

                $('#zamowieniePozycje').show();

            }

        };


        /* Create an array with the values of all the input boxes in a column, parsed as numbers */
        //$.fn.dataTable.ext.order['dom-text-numeric'] = function (settings, col) {
        //    return this.api().column(col, { order: 'index' }).nodes().map(function (td, i) {
        //        return $('input', td).val() * 1;
        //    });
        //}

        //Funkcja do sumowania kolumny tabeli
        $.fn.dataTable.Api.register('column().data().sum()', function () {
            return this.reduce(function (a, b) {
                var x = parseFloat(a.toString().replace(',', '.')) || 0;
                var y = parseFloat(b.toString().replace(',', '.')) || 0;
                return (x + y).toFixed(2);
            });
        });

        $(document).ready(
             function () {
                 var oTable = $('#zamowieniePozycje').DataTable(settings);

                 oTable.draw();
                 var ReadOnly = '@ViewBag.TrybPracy';

                 if (ReadOnly != '1')
                 { $('input, select, textarea, button, select ').attr('disabled', 'disabled'); }
             });



    </script>
}

@*<br />*@
<input id="status" value="@ViewBag.Status" data-message="@ViewBag.Message" style="display:none" />

<div id="alertNiezapisaneZmiany" class="alert alert-block alert-danger fade in" style="display: none">
    <h4 class="alert-heading">
        Nie zapisano zmian!
    </h4>
    <p>
        Dane zostały zmienione, ale nie zostały zapisane. Czy zapomnieć zmiany?
    </p>
    <p>
        <a class="btn btn-danger btn-lg zapomnijZmiany">Pozwól mi wyjść</a> <a class="btn btn-success  btn-lg"
                                                                               id="btnKoszykSubmitLeave">Zapisz zmiany</a>
    </p>
</div>


<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default panel-block">
            <div class="panel-heading">
                <h1 class="panel-title">@Html.DisplayNameFor(model => model.zamowienie.wlasciciel_nazwa)&nbsp;:&nbsp;@Html.DisplayFor(model => model.zamowienie.wlasciciel_nazwa)</h1>
            </div>
        </div>
    </div>
</div>

<div class="toHide">
    @using (Ajax.BeginForm("Edit", "Koszyk",
            new AjaxOptions
            {
                HttpMethod = "POST",
                InsertionMode = InsertionMode.Replace,
                OnBegin ="beforeKoszykSend",
                OnComplete = "onKoszykZapisComplete"
            },
            new { @id = "formKoszyk" }
                        ))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <div id="koszykDane">
            @*Pozycje zamówienia*@
            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-primary">
                        <div class="panel-heading">
                            Pozycje w koszyku @Html.DisplayFor(model => model.zamowienie.zamowienie_id)

                        </div>
                        <div class="panel-body">

                            <div class="form-group">
                                <div class="row">

                                    <div class="col-md-12 col-lg-12">
                                        <div class="row">
                                            <div class="col-xs-12 col-sm-6">

                                                @if (Model.zamowienie.blokada_id != 0)
                                                {
                                                    <div class="form-group">
                                                        @if (Request.IsAuthenticated)
                                                        {
                                                            if (User.IsInRole("StanyToolStripMenuItem"))
                                                            {
                                                                <button type="button" class="btn  btn-lg btn-info btn-mobile alertNiezapisaniaZmian" id="btnDodajDoKoszyka">
                                                                    <i class="fa fa-plus"> </i>
                                                                    Dodaj pozycje
                                                                </button>
                                                            }
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </div>


                                        @*<div class="form-group col-sm-3 col-md-7">*@
                                        <div class="col-md-12">
                                            @Html.DisplayNameFor(model => model.zamowienie.limit)&nbsp;:&nbsp;<b>@Html.DisplayFor(model => model.zamowienie.limit)&nbsp;</b>
                                            @Html.DisplayNameFor(model => model.zamowienie.wartosc)&nbsp;:&nbsp;<b><span id="wartoscLbl">@Html.DisplayFor(model => model.zamowienie.wartosc)</span>&nbsp;</b>
                                            @Html.DisplayNameFor(model => model.zamowienie.zamowienie_status)&nbsp;:&nbsp;<b>@Html.DisplayFor(model => model.zamowienie.zamowienie_status)</b>
                                        </div>
                                    </div>

                                </div>
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover dt-responsive tableTextCenter" id="zamowieniePozycje" style="display: none" width="100%">
                                        <thead>
                                            <tr>
                                                <th></th>
                                                <th></th>
                                                <th></th>
                                                <th></th>
                                                <th></th>
                                                <th></th>
                                                <th></th>
                                                <th></th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        @if (Model.zamowieniePozycje != null && Model.zamowieniePozycje.Count() > 0)
                                        {
                                            <tbody>
                                                @for (int i = 0; i < Model.zamowieniePozycje.Count(); i++)
                                                {
                                                    var wartosc = Model.zamowieniePozycje[i].ilosc * Model.zamowieniePozycje[i].koszt_punktowy;
                                                    var indexPozycji = "zamowieniePozycje_" + @Model.zamowieniePozycje[i].sku_id + "_" + @Model.zamowieniePozycje[i].sku_id + "_" + @Model.zamowieniePozycje[i].grupa_id;
                                                    //indexPozycji - domyslnie jest liczba rosnaca, ale musi byc ciagly i rosnacy - wiec po usunieciu pozycji z listy submit ucinal dane. Rozwiazanie - wlasne ID
                                                    //http://haacked.com/archive/2008/10/23/model-binding-to-a-list.aspx/ - opis sytuacji

                                                    <tr>
                                                        @*<td>@i</td>*@
                                                        <td></td>
                                                        <td>
                                                            <input id="wiersz_@i" type="hidden" name="zamowieniePozycje.Index" value="@indexPozycji" /> @*Index - inaczej Submit nie zadziala po przerwaniu ciagu elementow*@
                                                            <input id="ilosc_@i" value="@Model.zamowieniePozycje[i].ilosc" name="zamowieniePozycje[@indexPozycji].ilosc" type="number" class="wartoscSum sprawdzane form-control ilosc-select" style="width:70px" min=0 />
                                                            <input type="hidden" value="@Model.zamowieniePozycje[i].sku_id" name="zamowieniePozycje[@indexPozycji].sku_id" />
                                                            <input type="hidden" value="@Model.zamowieniePozycje[i].grupa" name="zamowieniePozycje[@indexPozycji].grupa" />
                                                            <input type="hidden" value="@Model.zamowieniePozycje[i].grupa_id" name="zamowieniePozycje[@indexPozycji].grupa_id" />
                                                            <input type="hidden" id="koszt_punktowy_@i" value="@Model.zamowieniePozycje[i].koszt_punktowy" name="zamowieniePozycje[@indexPozycji].koszt_punktowy" />
                                                            <input type="hidden" value="@Model.zamowieniePozycje[i].sku_nazwa" name="zamowieniePozycje[@indexPozycji].sku_nazwa" />
                                                            <input type="hidden" value="@Model.zamowieniePozycje[i].JM" name="zamowieniePozycje[@indexPozycji].JM" />
                                                        <td>
                                                            @Html.DisplayFor(model => Model.zamowieniePozycje[i].sku_nazwa)

                                                            <br />
                                                        </td>

                                                        <td>@Html.DisplayFor(model => Model.zamowieniePozycje[i].sku)</td>

                                                        <td>@Html.DisplayFor(model => Model.zamowieniePozycje[i].ilosc_dostepna)</td>
                                                        <td>@Html.DisplayFor(model => Model.zamowieniePozycje[i].JM)</td>
                                                        <td>@Html.DisplayFor(model => Model.zamowieniePozycje[i].koszt_punktowy)</td>

                                                        <td>@Html.DisplayFor(model => Model.zamowieniePozycje[i].grupa)</td>
                                                        <td>
                                                            <a class="text-danger deleteMe">
                                                                <i alt="Usuń" class="fa fa-trash-o fa-2x " data-rowid="@i"></i>
                                                            </a>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        }
                                        else
                                        {
                                            <tbody></tbody>
                                        }
                                    </table>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                @*Dane zamowienia (adresy)*@ @*<div class="row equal">*@
                @Html.HiddenFor(model => model.zamowienie.typ_zamowienia)
                @Html.HiddenFor(model => model.zamowienie.zamowienie_id)
                @Html.HiddenFor(model => model.zamowienie.blokada_id)
                <div class="col-md-7 ">

                    <div class="panel panel-primary">
                        <div class="panel-heading">
                            Dostawa
                        </div>
                        <!-- end panel-heading -->
                        <div id="divDostawa" class="panel-body ">
                            <label for="contact_name">
                                Sposób dostawy
                            </label>
                            <div class="form-group">

                                <div id="divAdresyZdefiniowane">
                                    @Html.Action(actionName: "ZamowienieAdresZdefiniowany", controllerName: "Koszyk", routeValues: new { zamowienie_id = @Model.zamowienie.zamowienie_id, adres_id = @Model.zamowienie.adres_id, typ_zamowienia = @Model.zamowienie.typ_zamowienia })
                                </div>

                                @Html.Action(actionName: "ZamowienieAdresyKurier", controllerName: "Koszyk", routeValues: new { model = @Model })

                                <div class="radio">
                                    <label>
                                        @Html.RadioButtonFor(model => model.zamowienie.typ_zamowienia, 2, @Model.zamowienie.typ_zamowienia == 2 ? (object)new { id = "2magazyn", Checked = "check", type = "radio", @class = "radio sprawdzane" } : new { id = "2magazyn", type = "radio", @class = "radio sprawdzane" })
                                        Odbiór własny w magazynie
                                    </label>
                                    <div id="sel2magazyn" class="divSelect" style="@(Model.zamowienie.typ_zamowienia == 2 ? "" : "display:none")">
                                        @Html.DropDownListFor(model => model.zamowienie.magazyn_docelowy_id, new SelectList(Model.zamowienieMagazyny, "magazyn_id", "nazwa"), new { @class = "form-control sprawdzane af2magazyn" })
                                    </div>
                                </div>

                                <div class="radio">
                                    <label>
                                        @Html.RadioButtonFor(model => model.zamowienie.typ_zamowienia, 4, @Model.zamowienie.typ_zamowienia == 4 ? (object)new { id = "4inny", Checked = "check", type = "radio", @class = "radio sprawdzane" } : new { id = "4inny", type = "radio", @class = "radio sprawdzane" })
                                        Odbiór inny adres
                                    </label>
                                    <input id="daneZmienione" value="0" style="display: none" />
                                    <div class="form-group divSelect" id="sel4inny" style="@(Model.zamowienie.typ_zamowienia == 4 ? "" : "display:none")">
                                        <div class="col-md-12">
                                            @Html.LabelFor(model => model.zamowienie.nazwa)
                                            @Html.TextBoxFor(model => model.zamowienie.nazwa, new { @class = "form-control sprawdzane af4inny" })
                                            @Html.ValidationMessageFor(model => model.zamowienie.nazwa)
                                        </div>
                                        @*<div class="col-md-7">
                                                @Html.LabelFor(model => model.zamowienie.email_odbiorcy)
                                                @Html.TextBoxFor(model => model.zamowienie.email_odbiorcy, new { @class = "form-control sprawdzane" })
                                                @Html.ValidationMessageFor(model => model.zamowienie.email_odbiorcy)
                                            </div>*@
                                        <div class="col-md-12">
                                            @Html.LabelFor(model => model.zamowienie.adres)
                                            @Html.TextBoxFor(model => model.zamowienie.adres, new { @class = "form-control sprawdzane" })
                                            @Html.ValidationMessageFor(model => model.zamowienie.adres)
                                        </div>
                                        <div class="col-md-5">
                                            @Html.LabelFor(model => model.zamowienie.kod)
                                            @Html.TextBoxFor(model => model.zamowienie.kod, new { @class = "form-control sprawdzane" })
                                            @Html.ValidationMessageFor(model => model.zamowienie.kod)
                                        </div>
                                        <div class="col-md-7">
                                            @Html.LabelFor(model => model.zamowienie.miasto)
                                            @Html.TextBoxFor(model => model.zamowienie.miasto, new { @class = "form-control sprawdzane" })
                                            @Html.ValidationMessageFor(model => model.zamowienie.miasto)
                                        </div>

                                    </div>
                                </div>

                                <div class="col-xs-12 col-sm-12 col-md-5">
                                    <label for="zamowienie_data_realizacji"> Data realizacji </label>

                                    @if (Model.zamowienie.data_realizacji != null)
                                    {
                                        DateTime dtData = Model.zamowienie.data_realizacji == null 
                                            ? DateTime.Today : (DateTime)(Model.zamowienie.data_realizacji);
                                        string strData = dtData.ToString("yyyy-MM-dd").Substring(0, 10);

                                        @Html.TextBoxFor(model => model.zamowienie.data_realizacji, String.Format("{0:d}", strData)
                                       , new { @class = "form-control sprawdzane", type = "date", data_date_format = "yyyy-MM-dd"
                                            , @style = "display:block" })

                                    }
                                    else
                                    {
                                        //@Html.TextBox("realizacja", String.Format("{0:d}", DateTime.Now.ToString("yyyy-MM-dd")), new { @class = "datepicker form-control sprawdzane", type = "date", data_date_format = "yyyy-MM-dd" })
                                        @Html.TextBoxFor(model => model.zamowienie.data_realizacji, String.Format("{0:d}", DateTime.Now.ToString("yyyy-MM-dd")), new { @class = "form-control sprawdzane", type = "date", data_date_format = "yyyy-MM-dd", @style = "display:block" })
                                    }
                                </div>

                            </div>
                            @*</div>
                                </div>*@
                            <!-- end panel-body -->
                        </div>
                        <!-- end panel-primary -->
                    </div>
                </div>

                @*Dane zamowienia (kontakt)*@
                <div class="col-md-5">

                    <div class="panel panel-primary ">
                        <div class="panel-heading">
                            Kontakt
                        </div>
                        <!-- end panel-heading -->
                        <div class="panel-body ">
                            @Html.LabelFor(model => model.zamowienie.osoba_kontaktowa)
                            @Html.TextBoxFor(model => model.zamowienie.osoba_kontaktowa, new { @class = "form-control sprawdzane" })
                            @Html.LabelFor(model => model.zamowienie.telefon_kontaktowy)
                            @Html.TextBoxFor(model => model.zamowienie.telefon_kontaktowy, new { @class = "form-control sprawdzane" })
                            @Html.ValidationMessageFor(model => model.zamowienie.telefon_kontaktowy)
                            @Html.LabelFor(model => model.zamowienie.uwagi)
                            @Html.TextAreaFor(model => model.zamowienie.uwagi, new { @class = "form-control sprawdzane", @style = "margin-top: 0px; margin-bottom: 0px; height: 90px; resize:none;" })
                        </div>
                    </div>
                    <!-- end panel-body -->
                </div>
            </div>
        </div>

        <div id="divInvisible" style="display: none">
        </div>
    }
    @using (Html.BeginForm("Realizuj", "Koszyk", FormMethod.Post, new { @id = "formRealizuj" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.zamowienie.zamowienie_id)
        @Html.HiddenFor(model => model.zamowienie.blokada_id)

    }
    <div class="col-xs-12 col-sm-6">
        <div class="form-group">
            <button class="btn btn-lg btn-info zapomnijZmiany btn-mobile" id="btnKoszykSubmit">
                <i class="fa fa-save">&nbsp;&nbsp;</i> Zapisz koszyk
            </button>
        </div>
    </div>

    <div class="col-xs-12 col-sm-6">
        <div class="form-group">
            <button class="btn btn-lg btn-success btn-mobile alertNiezapisaniaZmian" id="btnZamowienieRealizuj">
                <i class="fa fa-send">&nbsp;&nbsp;</i>
                Prześlij do realizacji
            </button>
        </div>
    </div>
</div>
@*Ponizej znajduja sie wartosci kolumn - ze wzgledu na ukrywanie ich w DataTables*@

<div id="slownikiGdyUkryte" style="display: none">
</div>

<div id="divListaAdresow"></div>